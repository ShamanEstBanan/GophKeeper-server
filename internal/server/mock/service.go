// Code generated by MockGen. DO NOT EDIT.
// Source: ShamanEstBanan-GophKeeper-server/internal/server (interfaces: Service)

// Package mock is a generated GoMock package.
package mock

import (
	entity "ShamanEstBanan-GophKeeper-server/internal/domain/entity"
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// CreateRecord mocks base method.
func (m *MockService) CreateRecord(arg0 context.Context, arg1 entity.Record) (*entity.Record, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRecord", arg0, arg1)
	ret0, _ := ret[0].(*entity.Record)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRecord indicates an expected call of CreateRecord.
func (mr *MockServiceMockRecorder) CreateRecord(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRecord", reflect.TypeOf((*MockService)(nil).CreateRecord), arg0, arg1)
}

// DeleteRecord mocks base method.
func (m *MockService) DeleteRecord(arg0 context.Context, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRecord", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRecord indicates an expected call of DeleteRecord.
func (mr *MockServiceMockRecorder) DeleteRecord(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRecord", reflect.TypeOf((*MockService)(nil).DeleteRecord), arg0, arg1, arg2)
}

// GetAllRecords mocks base method.
func (m *MockService) GetAllRecords(arg0 context.Context, arg1 string) (*[]entity.RecordInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllRecords", arg0, arg1)
	ret0, _ := ret[0].(*[]entity.RecordInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllRecords indicates an expected call of GetAllRecords.
func (mr *MockServiceMockRecorder) GetAllRecords(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllRecords", reflect.TypeOf((*MockService)(nil).GetAllRecords), arg0, arg1)
}

// GetRecord mocks base method.
func (m *MockService) GetRecord(arg0 context.Context, arg1, arg2 string) (*entity.Record, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRecord", arg0, arg1, arg2)
	ret0, _ := ret[0].(*entity.Record)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRecord indicates an expected call of GetRecord.
func (mr *MockServiceMockRecorder) GetRecord(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRecord", reflect.TypeOf((*MockService)(nil).GetRecord), arg0, arg1, arg2)
}

// GetRecordsByType mocks base method.
func (m *MockService) GetRecordsByType(arg0 context.Context, arg1, arg2 string) (*[]entity.RecordInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRecordsByType", arg0, arg1, arg2)
	ret0, _ := ret[0].(*[]entity.RecordInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRecordsByType indicates an expected call of GetRecordsByType.
func (mr *MockServiceMockRecorder) GetRecordsByType(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRecordsByType", reflect.TypeOf((*MockService)(nil).GetRecordsByType), arg0, arg1, arg2)
}

// UpdateRecord mocks base method.
func (m *MockService) UpdateRecord(arg0 context.Context, arg1 entity.Record) (*entity.Record, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRecord", arg0, arg1)
	ret0, _ := ret[0].(*entity.Record)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateRecord indicates an expected call of UpdateRecord.
func (mr *MockServiceMockRecorder) UpdateRecord(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRecord", reflect.TypeOf((*MockService)(nil).UpdateRecord), arg0, arg1)
}
